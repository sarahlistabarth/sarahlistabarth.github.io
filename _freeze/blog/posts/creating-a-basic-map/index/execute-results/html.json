{
  "hash": "626ae6a2505c2d5bdcda42325e3a47e2",
  "result": {
    "markdown": "---\nauthor: Sarah Zeller\ntitle: \"Creating a map with `ggplot2`\"\ndate: \"2024-01-04\"\ncategories: [code, visualization]\nimage: \"map.png\"\ncitation: \n  url: https://sarahzeller.github.io/blog/posts/creating-a-basic-map/\n\nformat:\n  html:\n    toc: true\n\nexecute:\n  warning: false\n---\n\n\nIn this post, I create a basic world map -- specifically, a Choropleth map. That means we colour the countries by a specific variable.\n\n# Preparation\n\nFirst, I load all necessary libraries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(countrycode)\nlibrary(rnaturalearth)\nlibrary(ggspatial)\n```\n:::\n\n\nThen, I declare some countries. I standardize their names with the package `countrycode`, so that we get these countries' ISO3-codes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_countries <- c(\"Afghanistan\",\n                  \"Federal Republic of Germany\",\n                  \"USA\")\n\nmy_countries_clean <- countrycode(my_countries,\n                                  origin = \"country.name\",\n                                  destination = \"iso3c\")\n```\n:::\n\n\nI then load the data for the map. It's saved in a format called `sf`, which stands for spatial feature. We can treat it just like any other data frame, but each row has a column called \"geometry\", from which the coordinates of the row can be plotted -- in this case, a country's outline.\n\nThen, we create a new variable: we check for each observation if it's part of our `my_countries_clean` vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- ne_countries(returnclass = \"sf\") |> # load world\n  # check for each country: is it in my_countries_clean?\n  mutate(is_my_country = iso_a3 %in% my_countries_clean)\n```\n:::\n\n\n::: callout-tip\nIf we start off from a data frame instead of a vector, we would `merge` the two data frames. Then, we don't just end up with a Boolean variable, but with all of the variables of the joint data frame.\n:::\n\n# Plotting\n\nNow, we're ready to plot our map!\n\n## Basic map\n\nWe can simply do this with `ggplot`, with the function `geom_sf`. It takes normal `aes`thetics, so we can just hand it our variable of interest -- `is_my_country`. Since this is a map, it makes the most sense to just fill the polygons according to this variable, so we use the `fill` aesthetic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # plot an sf object\n  geom_sf(data = world,\n          # fill it according to my variable\n          aes(fill = is_my_country))\n```\n\n::: {.cell-output-display}\n![Choropleth map of my countries -- basic](index_files/figure-html/fig-map-basic-1.png){#fig-map-basic width=672}\n:::\n:::\n\n\n## Intermediate map\n\nWe now decrease some of the clutter. We get rid of the legend since it's just a Boolean -- we can indicate this in our title/caption. We also choose different colours, and get rid of the gridlines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # plot an sf object\n  geom_sf(data = world,\n          # fill it according to my variable\n          aes(fill = is_my_country),\n         # don't show the legend: it's just true or false, can be shown in title\n          show.legend = FALSE) +\n  # make colours prettier\n  scale_fill_manual(values = c(\"white\", \"wheat\")) +\n  # remove clutter\n  theme_void() \n```\n\n::: {.cell-output-display}\n![Choropleth map of my countries (in yellow) -- intermediate](index_files/figure-html/fig-map-intermediate-1.png){#fig-map-intermediate width=672}\n:::\n:::\n\n\n## Prettier map\n\nIt doesn't quite look like we're used to, though. Check out the comments to see what we've changed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # plot an sf object\n  geom_sf(\n    data = world,\n    # fill it according to my variable\n    aes(fill = is_my_country),\n    # make borders lighter\n    col = \"grey80\",\n    # don't show the legend: it's just true or false, can be shown in title\n    show.legend = FALSE\n  ) +\n  # add country labels\n  geom_sf_text(\n    # get the data just for the countries we want to show\n    data = world |> filter(is_my_country == TRUE),\n    # get the sovereignt label, and transform it to upper case\n    aes(label = admin |> toupper()),\n    # make it not as dark\n    col = \"grey30\",\n    # decrease size\n    size = 2.5\n  ) +\n  # make colours prettier\n  scale_fill_manual(values = c(\"white\", \"wheat\")) +\n  # change to a nicer projection: equal area (more accurate)\n  coord_sf(crs = \"ESRI:54009\") +\n  # remove clutter\n  theme_void()\n```\n\n::: {.cell-output-display}\n![Choropleth map of my countries -- prettier version](index_files/figure-html/fig-map-advanced-1.png){#fig-map-advanced width=672}\n:::\n:::\n\n\n## Prettier map with ocean\n\nThere's just some lines of code you need to add to have a round earth/rounded sea.\nWe need to create a polygon that has just the shape of the earth. \nWe can do this with `st_graticule`, and then `st_cast` it to a polygon.\nThen, we can simply plot this polygon at the beginning of our `ggplot`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrat <- st_graticule() |> st_cast('POLYGON')\n\nggplot() +\n  # this is the new line\n  geom_sf(data = grat, fill = \"#d7ecfa\", col = \"#d7ecfa\") +\n  # now everything is the same as before\n  geom_sf(\n    data = world,\n    aes(fill = is_my_country),\n    col = \"grey80\",\n    show.legend = FALSE\n  ) +\n  # add country labels\n  geom_sf_text(\n    data = world |> filter(is_my_country == TRUE),\n    aes(label = admin |> toupper()),\n    col = \"grey30\",\n    size = 2.5\n  ) +\n  # make colours prettier\n  scale_fill_manual(values = c(\"white\", \"wheat\")) +\n  # change to a nicer projection: equal area (more accurate)\n  coord_sf(crs = \"ESRI:54009\") +\n  # remove clutter\n  theme_void()\n```\n\n::: {.cell-output-display}\n![Choropleth map of my countries -- round earth](index_files/figure-html/fig-earth-round-1.png){#fig-earth-round width=672}\n:::\n:::\n\n\n\n## Advanced stuff\n\nIf you're really interested, you can check out the following on top:\n\n-   graticules (latitude/longitude)\n-   North arrow (not recommended for world maps, though)\n-   scale (not recommended for most world maps, though)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}