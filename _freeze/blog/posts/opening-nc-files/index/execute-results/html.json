{
  "hash": "847de00ab35a06cc4b3ca4363093dd52",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sarah Zeller\ntitle: Opening `.nc` files\ndate: \"2024-02-24\"\nimage: \"raster.png\"\ncategories: [code, raster formats]\ncitation:\n  url: https://sarahzeller.github.io/blog/posts/opening-nc-files/\n\nformat:\n  html:\n    toc: true\n\nexecute:\n  warning: false\n  \neditor: \n  markdown:\n    wrap: sentence\n---\n\n\nWhen working with raster data, one thing I've noticed is: there's a lot of obscure data formats.\nAnd with every one of them, it takes me a while to figure out how to handle them in `R`.\nSo I decided to make a series of blog posts on how to handle some of the raster formats I've come across.\n\nThe first one are `.nc` files, also known as netCDF.\nFrom what I've learned, they usually have three layers:\n\n-   latitude\n-   longitude\n-   time\n\nHowever, the order of these three layers varies, which means you'll have to get acquainted with your data first.\nSo:\n\n1.    Get to know dataset with `ncdf4`\n2.    Read in data with `terra::rast()`\n\n::: {.callout-note}\n## Further info\n\nThis blog post is based in parts on [R as GIS for Economists](https://tmieno2.github.io/R-as-GIS-for-Economists/work-with-netcdf.html) and an [RPubs article on ncdf4](https://rpubs.com/boyerag/297592).\n:::\n\n# Setup\n\nFirst, we load the necessary libraries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\nlibrary(ncdf4)\nlibrary(purrr)\n```\n:::\n\n\nThen, we prepare the data.\nI'm taking data from the German Weather Service ([DWD](opendata.dwd.de)) for the mean temperature in 2019.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create temporary path and download the raster data\nraster_path <- tempfile(fileext = \".nc\")\ndownload.file(\n  url = \"https://opendata.dwd.de/climate_environment/CDC/grids_germany/daily/hyras_de/air_temperature_mean/tas_hyras_5_2019_v5-0_de.nc\",\n  destfile = raster_path,\n  # it's a binary file\n  mode = \"wb\")\n```\n:::\n\n\nI want to know what the weather was like on the day after the last episode of Game of Thrones aired -- May 20, 2019.\nWhy the day after?\nBecause it was usually released in American time, so one could only stream it the day after.\nMy assumption would be that if the weather was not great, people were more likely to watch the final episode right away.\n\nLet's just figure out what day of the year May 20, 2019 was:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nday_of_year <- strftime(\"20-05-2019\", format = \"%j\") |> as.integer()\nday_of_year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 141\n```\n\n\n:::\n:::\n\n\n# Checking out the structure and loading the data\n\nLet's `nc_open` this file now to check out it's structure.\n\n## Open nc file\n\nThe first thing we do is have a look at the variable names (they're saved under `var` in the `weather` list).\nLet's also check out their names, which is saved under _longname_ in this ncd4 format.\nAdditionally, let's find out their respective dimensions, saved under _size_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraster <- raster_path |> nc_open()\n\nraster |> \n  pluck(\"var\") |> \n  map_df(~ .x[c(\"longname\", \"size\")] |> as.character()) |> \n  # you could stop here, but I wanted a nice display\n  t() |> \n  data.frame() |> \n  tibble::rownames_to_column() |> \n  setNames(c(\"variable\", \"name\", \"dimension\")) |> \n  kableExtra::kbl()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> variable </th>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:left;\"> dimension </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> time_bnds </td>\n   <td style=\"text-align:left;\"> time_bnds </td>\n   <td style=\"text-align:left;\"> c(2, 365) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> lon </td>\n   <td style=\"text-align:left;\"> Longitude Of Cell Center </td>\n   <td style=\"text-align:left;\"> c(240, 220) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> lat </td>\n   <td style=\"text-align:left;\"> Latitude Of Cell Center </td>\n   <td style=\"text-align:left;\"> c(240, 220) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x_bnds </td>\n   <td style=\"text-align:left;\"> x_bnds </td>\n   <td style=\"text-align:left;\"> c(2, 240) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> y_bnds </td>\n   <td style=\"text-align:left;\"> y_bnds </td>\n   <td style=\"text-align:left;\"> c(2, 220) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> crs_HYRAS </td>\n   <td style=\"text-align:left;\"> DWD HYRAS ETRS89 LCC grid with 240 columns and 220 rows </td>\n   <td style=\"text-align:left;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tas </td>\n   <td style=\"text-align:left;\"> Daily Mean Air Temperature </td>\n   <td style=\"text-align:left;\"> c(240, 220, 365) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> number_of_stations </td>\n   <td style=\"text-align:left;\"> Number Of Stations Available For Interpolation Per Day All Over The HYRAS Area </td>\n   <td style=\"text-align:left;\"> 365 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Time and spatial layers {#sec-vars}\n\nWe're definitely going to need something along the lines of *latitude* and *longitude*.\nFrom the descriptions, we can see that *lat* and *lon* describe the cell center, and their dimension is 240 $\\times$ 220.\nThat is not what we need.\nInstead, we want something with dimensions of 1--2 $\\times$ 240 _or_ 220, which describes the latitude and longitude in general, not for every cell center.\nIn this case, that applies for *x_bnds* and *y_bnds*.\n\nWe also need something specifying the time.\nIn this case, that is *time_bnds*.\n\nLet's also get the crs for good measure, *crs_HYRAS*.\nThis only has dimension 1, so we need to extract is as an attribute.\n\nAll of these layers can be named differently in different files, so it pays off to check out the specific name.\nLet's save them into variables so we can't forget them!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime <- ncvar_get(raster, \"time_bnds\")\nlon <- ncvar_get(raster, \"x_bnds\")\nlat <- ncvar_get(raster, \"y_bnds\")\ncrs <- ncatt_get(raster, \"crs_HYRAS\")$epsg_code\n```\n:::\n\n\n## Variable layer\n\nNow, we also need the actual variable we're looking for.\nIn this case, it's *tas* (for mean daily temperature).\nWe can see that the dimensions are the largest and match our geospatial and time dimensions: 240 (*x_bnds*) $\\times$ 220 (*y_bnds*) $\\times$ 365 (*time_bnds*).\n\nLet's get this variable's array out.\nAdditionally, let's find out how the `NA`s are coded, and use that information to code them as `NA`s that `R` recognizes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_array <- ncvar_get(raster, \"tas\")\nfillvalue <- ncatt_get(raster, \"tas\", \"_FillValue\")\n\n# set NA value\nvariable_array[variable_array == fillvalue$value] <- NA\n```\n:::\n\n\n## Close nc file\n\nNow we have all the information we need, yay!\nLet's not forget to close the `.nc` file again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_close(raster)\n```\n:::\n\n\n# Extracting the layer with `ncdf4`\n\nNow for the fun part!\nLet's get out the day that we want -- 141.\nWe first do this with `ncdf4` and the information we already gathered.\nWe could, however, also do this with `terra`.\n\n## Making a raster\n\nNext, we make a `rast`er of this with the `terra` package.\nWe already know the structure of the array, where time is the last layer.\nThis does vary over different files though!\n\nWe declare the extent and the crs that we extracted in @sec-vars.\nThen, let's go ahead and plot it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_weather_array <- variable_array[,, day_of_year]\ngot_weather_raster <- got_weather_array |> \n  terra::rast(extent = ext(min(lon),\n                             max(lon),\n                             min(lat),\n                             max(lat)),\n                crs = crs)\nplot(got_weather_raster)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/layer-doy-1.png){width=672}\n:::\n:::\n\n\nWell, this somewhat looks like Germany ... but not quite yet.\nWe need to mirror it and turn it by 90Â°.\n\n## Transposing the raster \n\nFor this, we need to go back to the last step, and transpose the 2-dimensional array for our specific day.\nThen, we make it a `rast`er again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_weather_raster_transposed <- got_weather_array |>\n  t() |>\n  terra::rast(extent = ext(min(lon),\n                           max(lon),\n                           min(lat),\n                           max(lat)),\n              crs = crs)\n\ngot_weather_raster_transposed |> \n  plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/rast-transpose-1.png){width=672}\n:::\n:::\n\n\nWell, this is almost right -- we just need to turn it upside down now.\n\n## Flipping the raster\n\nFor this task, `terra` has a specific function, `flip`.\nWe can say which way to flip the raster -- in this case, vertically.\nLet's go ahead and plot this again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_weather_raster_right_side_up <- got_weather_raster_transposed |> \n  flip(direction = \"vertical\")\n\ngot_weather_raster_right_side_up |> plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/turn-raster-upside-down-1.png){width=672}\n:::\n:::\n\n\nAnd there we have it!\n\n# Taking the shortcut with `terra`\n\nAn alternative way of reading `.nc` data into a `rast`er is using `terra::rast()` directly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraster_terra <- rast(raster_path,\n                     drivers = \"NETCDF\")\n```\n:::\n\n\nIn this case, the layer structure is rather easy:\nWe simply have 365 layers for *tas*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraster_terra |> \n  names() |> \n  data.frame(layer_name = _) |> \n  tidyr::separate_wider_delim(layer_name, \n                              names = c(\"variable\", \"day\"),\n                              delim = \"_\") |> \n  DT::datatable(options = list(pageLength = 5))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-477fa670290de144d0f8\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-477fa670290de144d0f8\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"306\",\"307\",\"308\",\"309\",\"310\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"320\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"330\",\"331\",\"332\",\"333\",\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"350\",\"351\",\"352\",\"353\",\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"360\",\"361\",\"362\",\"363\",\"364\",\"365\"],[\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\",\"tas\"],[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"306\",\"307\",\"308\",\"309\",\"310\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"320\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"330\",\"331\",\"332\",\"333\",\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"350\",\"351\",\"352\",\"353\",\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"360\",\"361\",\"362\",\"363\",\"364\",\"365\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>variable<\\/th>\\n      <th>day<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nIn such an easy case, we can extract the layer for our *day_of_year* as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraster_terra[[day_of_year]] |> plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/extract-layer-terra-1.png){width=672}\n:::\n:::\n\n\n\nAnd there we have it -- we extracted the weather on the day after the last episode of Game of Thrones aired!\nIn the South, weather was a lot colder, so maybe more people watched the last episode there.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<link href=\"../../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/datatables-binding-0.30/datatables.js\"></script>\n<script src=\"../../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../../site_libs/dt-core-1.13.4/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/dt-core-1.13.4/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/dt-core-1.13.4/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}